########                                         ##########
#            University of Central Florida                #
# Department of Electrical Engineering & Computer Science #
#                   EEL 4932  - CAD of VLSI               #
#                     HW#2 CAD of VLSI                    #
########                                         ##########

#! /usr/bin/perl
use warnings;
#use strict;
use utf8;
use File::Basename;
use Data::Dumper qw(Dumper);
use List::Util qw( min max );
use List::MoreUtils qw(first_index);

########                                    ##########
#                 MAIN PROGRAM                       #
########                                    ##########


#Ask user to give the location of the input file folder
print "Give the input folder's path name (ex: '/Users/Desktop/in')\n>> ";
my $dir = <STDIN>;
chomp $dir;

#my own directory for testing purposes only
#my $dir = "/Users/preciousbrazil/Desktop/Sandbox/in";


opendir(DIR, $dir) or die "Could not open '$dir'! Try again!\n";
$num_files = () = readdir(DIR);

#go through all the files within the input folder
foreach my $file (glob("$dir/*")) {

   my $start = time;   
   open my $filename, "<", $file or die "can't open '$file'\n";

   #create an array that will number of edges and nodes
   @numNodes = (); 
   @numEdges = ();
   my @horizontal = ();
   my @vertical = ();
   my $lineNum=0;
   
   print "Reading input file $file . . \n";
   my $j = 0;
   while(my $line = <$filename>){
         my $array_ref = +{};
         $filebasename = basename($file);
         ($outputname = $filebasename) =~ s/^(.*?)\.in/$1/;
         $lineNum +=1;
         chomp $line;
         #first line
         if ($lineNum == 1){
               @numNodes = split (/ /, $line);
         }
         #second line
         elsif ($lineNum ==2){
               @numEdges = split (/ /, $line);
         }
         #body
         else {
         #create array of arrays
         my @fields = split / /, $line; 
    
            foreach my $i (0..2){
                  $horizontal[$i] = $fields[$i];
                  $array_ref -> {$i} = $horizontal[$i];                 
            }

         push @vertical, $array_ref;

         $j += 1;
        #print "Line finished reading\n";    
        
        } #close reading body statement   
    
    } #close while open

  #Checking values (for testing purposes)
  #print Dumper (@numNodes);
  #print Dumper (@numEdges);
  #print "*********** Printing the expected 2x2 array\n";
  #print Dumper (@vertical);
      
   #Let me know when EOF is reached
   print "File Ended. . . . .\n";
   close($filename);
   
   
   # Create the partition assignment
   my @partition = map {0} (1.. $numNodes[1]/2);
   my @partition1 = map {1} (1.. $numNodes[1]/2);
   #combine the partition vector list
   push @partition, @partition1;
   #print Dumper (@partition);

   $initialCut = &computeCutSet(\@vertical, \@partition);
   print "The value of the initial cut: $initialCut\n";
   push (@init_cut, $initialCut);
   
   	my $initial_duration = time - $start;
    push (@init_time_elapsed, $initial_duration);
 
 
 ITERATION:    
    #Calculating D for each node
 	&calculateD(\@vertical, \@partition);
 	#print "Printing External Cost Array\n";
 	#print Dumper (@External);
 	#print "Printing Internal Cost Array\n";
 	#print Dumper (@Internal);
 	#print "D Array\n";
 	#print Dumper (@D);
 	
 
	# Calculate Gain for each node pairs
	&calculateG (\@D, \@vertical);
	#print "Printing the Gain array\n";
	#print Dumper (@Gain);
	
	
    # Find the maximum Gain
    my $maxGain = max @Gain;
    #print "max gain = $maxGain\n";
    
    #If maxgain is negative, stop
    if ($maxGain <= 0){
		goto ENDFILE;
	}
	
	#If maxgain is positive, continue with the node swap
	else {
    
    	#Find the node pair that yields max gain
    	$nodepair_index =  first_index { $_ eq $maxGain } @Gain;
    	print "My node pair index= $nodepair_index \n";
    
    	$node_pair1 = $nodepair_index+1, 
    	$node_pair2 = $node_pair1+($numNodes[1]/2);
    	print "Node to Swap: node1: $node_pair1 node2: $node_pair2\n";
    
   		print "***  Swapping nodes...... \n";
  		&swapNodes(@partition);
  	
  		#print "Printing UPDATED Partition Array\n";
 		#print Dumper (@partition);
 		
 		goto ITERATION;
	
	}
	
	ENDFILE:
	print "************* REACHED END FILE\n";
	my $end_duration = time - $start;
    print "Execution time: $duration s\n";
    push (@time_elapsed, $end_duration);
    
	$finalcut = 1;
    my $finalCutsize = &computeCutSet(\@vertical, \@partition);
    push (@cutarray, $finalCutsize);
    
    
    #Create Output File(cut information)
    open my $finaloutput, '>', $outputname.'.out';
    # provide the cut of the partitioning
    print {$finaloutput} "cut $finalCutsize" . "\n";
    foreach my $item (@partition){
    	print {$finaloutput} "$item" . "\n";
    }
    close $finaloutput;
  
    print "\n\n*************************************************************\n\n";
    print " > >  Check directory for the output files produced   < < ";
    print "\n\n*************************************************************\n\n";  


   #exit; #only do the first file for now (for testing purposes)
      

} #end foreach item in the directory

closedir(DIR);


#Create SummaryOutput File  
open my $summary, '>','summary.out';
print {$summary} "Input file, Initial Cutsize, Initial Time Execution, Cutsize, Time Elapsed" . "\n";
	for (my $i=0; $i<$num_files; $i+=1){
    	 my $j = $i+1;
		print {$summary} "File $j, $init_cut[$i], $init_time_elapsed[$i] sec(s), "." $cutarray[$i],"." $time_elapsed[$i] "."sec(s)" . "\n";
	}
close $summary;



########                                    ##########
#                   SUBROUTINES                      #
########                                    ##########

sub computeCutSet {

   # Compute the cut
   my ($vertical, $partition) = @_;
   my $cutSize = 0;
   my @vertical = @{$vertical};
   my @partition = @{$partition};
 
   foreach my $item(@vertical){
    #print "first index: $item->{'0'} compare second index: $item->{'1'}\n";
    #print "$partition[$item->{'0'}-1] compare $partition[$item->{'1'}-1]\n";
	if ($partition[$item->{'0'}-1] != $partition[$item->{'1'}-1]){
			#print "the weight to be added is: $item->{'2'}\n";
            $cutSize += $item->{'2'};
	}  
   }
   #print "The final value of the initial cut is: $initialCut\n";
   return $cutSize;
}

sub calculateD {
   my ($vertical, $partition, @internal, @external) = @_;
   my @vertical = @{$vertical};
   my @partition = @{$partition};
   
   # Create Internal Cost array
   @Internal= map {0} (1.. $numNodes[1]);
   # Create External Cost array
   @External= map {0} (1.. $numNodes[1]);
   # Create D array
   @D= map {0} (1.. $numNodes[1]);
    
 foreach my $item(@vertical){
	if ($partition[$item->{'0'}-1] != $partition[$item->{'1'}-1]){
	        #if we get here, meaning the weight is an External Cost
	        $External[$item->{'0'}-1] += $item->{'2'};
	        $External[$item->{'1'}-1] += $item->{'2'};
		}  	
	else {
	     #if we get here, meaning it is an Internal Cost
	     	$Internal[$item->{'0'}-1] += $item->{'2'};
	        $Internal[$item->{'1'}-1] += $item->{'2'};
	}	
		
   }
   
   for (my $i=0; $i<=$#D; $i+=1){
    $D[$i] = $External[$i] - $Internal[$i];
   }
     

}

sub calculateG {
   my ($D, $vertical) = @_;
   my @D = @{$D};
   my @vertical = @{$vertical};
   @Gain= map {0} (1.. $numNodes[1]);
   for (my $x=0; $x<=($#Gain/2); $x+=1){
    my $y= $x+($numNodes[1]/2);
    foreach my $item (@vertical) {
        #convert to int just in case
        my $node1= int($item->{'0'});
        my $node2= int($item->{'1'});
        #print "node1 = $node1, (x+1) = ($x+1), node2= $node2, (y+1)= ($y+1)\n";
    	if ( ( ($node1 == ($x+1)) | ($node1 == ($y+1)) ) & ( ($node2 == ($x+1)) | ($node2 == ($y+1)) ) ){
    		$Cxy = $item->{'2'};
    		goto EXIT;
     	}
    	else {
    		$Cxy = 0;
    	}
    }
    EXIT:
    #print "x = $x and y = $y and Cxy = $Cxy\n";
    $Gain[$x] = $D[$x] + $D[$y] - 2*($Cxy);
   }
   
}

sub swapNodes {

$secondnode =  $nodepair_index + ($numNodes[1]/2);
  
($_[$nodepair_index], $_[$secondnode]) =  ($_[$secondnode], $_[$nodepair_index]);
 
}
